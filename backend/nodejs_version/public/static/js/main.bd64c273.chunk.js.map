{"version":3,"sources":["components/Input.tsx","api/CoinGecko/Coins/Convert.ts","api/CoinGecko/Coins/MarketChart.ts","components/Output.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["InputView","props","React","useState","start","setStart","end","setEnd","datesErr","setDatesErr","dateErr","setDateErr","getInputStyle","ok","border","borderColor","borderRadius","backgroundColor","alignSelf","marginLeft","marginRight","useEffect","console","log","setOutputOk","setStartDate","setEndDate","style","styles","container","className","inputs","inputGroup","inputLabel","htmlFor","type","name","onChange","e","Date","target","value","getTime","color","padding","width","textAlign","margin","MILLIS_IN_DAY","filterDublicateDates","arr","filtered","forEach","x","midnight_date","undefined","find","y","push","getA","data","allRows","prices","bear","current","last","filteredPrices","rows","row_start","row_end","row_start_value","latest_value","price","value_change","day_count","change","days","contains","row","getMarketRows","sort","a","b","pop","getC","length","max_change","min_val","min_date","max_date","min_date_rtn","n","maxChange","buy_date","sell_date","should_trade","getAllFromRangeJSON","range","JSON","parse","total_volumes","maxVal","date","getB","c","BASE_URL","getData","from","to","coin","vs_currency","url","fetch","res","status","json","Convert","stringify","OutputView","startDate","endDate","setA","setB","setC","loading","setLoading","updateData","getDateStr","time","dt","toLocaleString","timeZone","toLocaleDateString","Spinner","animation","variant","outputs","Row","sm","Col","outputGroup","borderWidth","height","marginBottom","fontWeight","App","inputOk","setInputOk","body","role","main","Container","fluid","minWidth","Navbar","bg","expand","header","Brand","src","alt","brand_icon","href","rel","id","footer","paddingTop","marginTop","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","app_store_badge","paddingRight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd64c273.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * InputView props\n */\ninterface Props {\n    setStartDate: Function;\n    setEndDate: Function;\n    setOutputOk: Function;\n}\n\n/**\n *\n * @param props useState functions from the parent view\n * @returns InputView for the date range\n */\nexport default function InputView(props: Props) {\n    // Start date (timestamp)\n    const [start, setStart] = React.useState<number>();\n    // End date (timestamp)\n    const [end, setEnd] = React.useState<number>();\n    // Error text for input check\n    const [datesErr, setDatesErr] = React.useState<string>(\"\");\n    // Are the dates right\n    const [dateErr, setDateErr] = React.useState<boolean>(false);\n\n    // CSS style for date input (red borders if start is not before end date)\n    const getInputStyle = (ok: boolean): React.CSSProperties => {\n        return {\n            border: \"2px solid\",\n            borderColor: !ok ? \"#ccccccee\" : \"#f11\",\n            borderRadius: \"4px\",\n            backgroundColor: \"#f8f8f8aa\",\n            alignSelf: \"end\",\n            marginLeft: \"2px\",\n            marginRight: \"2px\"\n        };\n    };\n\n    // Execute when user changes date range\n    React.useEffect(() => {\n        if (start && end) {\n            if (start < end) {\n                console.log(`User typed:\\nstart date: ${start}\\nend date: ${end}`);\n                setDatesErr(\"\");\n                setDateErr(false);\n                props.setOutputOk(true);\n                props.setStartDate(start);\n                props.setEndDate(end+3600);\n            } else {\n                setDatesErr(\"Start date must be before end date\");\n                setDateErr(true);\n                props.setOutputOk(false)\n            }\n        }\n    }, [props, start, end]);\n\n    return (\n        <div style={styles.container} className=\"d-inline-block\">\n            <h2>Input</h2>\n            <hr/>\n            <div style={styles.inputs}>\n                <h4>Date range</h4>\n                <div style={styles.inputGroup}>\n                    <label style={styles.inputLabel} htmlFor=\"input_start_date\">Start date:</label>\n                    <input type=\"date\" name=\"input_start_date\" style={getInputStyle(dateErr)} onChange={(e) => setStart(new Date(e.target.value).getTime() / 1000)} />\n                </div>\n                <hr />\n                <div style={styles.inputGroup}>\n                    <label style={styles.inputLabel} htmlFor=\"input_end_date\">End date:</label>\n                    <input type=\"date\" name=\"input_end_date\" style={getInputStyle(dateErr)} onChange={(e) => setEnd(new Date(e.target.value).getTime() / 1000)} />\n                </div>\n                <div style={{ color: \"#e11\" }}>\n                    {datesErr}\n                </div>\n            </div>\n        </div>\n    );\n}\n\n/**\n * CSS styles for InputView\n */\nconst styles: { [key: string]: React.CSSProperties } = {\n    container: {\n        backgroundColor: \"#DDDDEECC\",\n        padding: \"12px\",\n        borderRadius: \"12px\",\n        width: \"fit-content\"\n    },\n    inputGroup: {\n        backgroundColor: \"#abcabccc\",\n        borderRadius: \"4px\",\n        padding: \"2px\"\n    },\n    inputs: {\n        backgroundColor: \"#DDDDDDBB\",\n        textAlign: \"left\",\n        margin: \"2px\",\n        padding: \"4px\",\n        borderRadius: \"4px\"\n    },\n    inputLabel: {\n        width: \"92px\",\n        marginLeft: \"2px\"\n    }\n}\n","import * as Types from './type';\n\n// Global constants:\n\n/**\n * Milliseconds in a day\n */\nconst MILLIS_IN_DAY = 86400000;\n\n// Types:\n\n/**\n * Output type for @function getMarketRows()\n */\ninterface MarketRow {\n    // Start date in datestamp\n    start: number;\n    // End date in datestamp\n    end: number;\n    // Value change between start and end date\n    change: number;\n    // The number of dates the row last\n    days: number;\n}\n\n// Helpers:\n\n/**\n *\n * @param arr 2D array where the sub array contains timestamp in index 0 and value in index 1\n * @returns The array with only the first sub array of a day (timestamp will be converted to 1 second over midnight)\n */\nconst filterDublicateDates = (arr: number[][]) => {\n    // Array for filtered values\n    const filtered: number[][] = [];\n    // Go throught the array and add only the first sub array of a day into the filtered array\n    arr.forEach(x => {\n        // Calculate the number of dates in the timestamp (rounded to zero)\n        const day_count = (x[0] / MILLIS_IN_DAY) | 0;\n        // Calculate new timestamp value of 1 second over midnight, so we can check, do we already have it in the filtered array\n        const midnight_date = (day_count) * MILLIS_IN_DAY + 1000;\n\n        // Push into filtered array only if not already in there\n        if (filtered.find(y => y[0] === midnight_date) === undefined)\n            filtered.push([midnight_date, x[1]]);\n    });\n\n    //console.log('Filtered:\\n', filtered);\n\n    // Return filtered array\n    return filtered;\n}\n\n/**\n *\n * @param prices 2D array of price data where sub arrays 1st index is timestamp and 2nd index is value\n * @param bear True if you want all bearish rows and false if you want all bullish rows\n * @returns Array of MarketRow interfaces (all rows (bearish or bullish) from the prices data)\n */\nconst getMarketRows = (prices: number[][], bear: boolean): MarketRow[] => {\n    // Filtered prices (we only need the first value of each day in the data)\n    const filteredPrices = filterDublicateDates(prices);\n\n    // Compare as bear or bull market (bear market if bear is true, otherwise bull)\n    const compare = (current: number, last: number) => (bear) ? (current>last) : (current<last);\n\n    // Array for market rows\n    const rows: MarketRow[] = [];\n\n    // Row start date\n    let row_start = 0;\n    // Row end date\n    let row_end = 0;\n    // Row start price\n    let row_start_value = 0;\n\n    // Latest price (value on the last iteration)\n    let latest_value = -1;\n    for (const price of filteredPrices) {\n        // On the first iteration, set start values\n        if (latest_value === -1) {\n            row_start = price[0];\n            row_end = price[0];\n            row_start_value = price[1];\n            latest_value = price[1];\n            // Continue to the next values\n            continue;\n        }\n\n        // Has the row ended?\n        if (compare(price[1], latest_value)) {\n            // Price change of the row\n            const value_change = (bear) ? row_start_value-latest_value : latest_value-row_start_value;\n            // Number of days in the row\n            const day_count = (((row_end - row_start) / MILLIS_IN_DAY) | 0);// +1;\n\n            // Add the row into array\n            rows.push({ start: row_start, end: row_end, change: value_change, days: day_count });\n\n            // Print values\n            /*console.log(\n                '\\nStart:\\t\\t', new Date(row_start).toLocaleString(), '\\tPrice: ', row_start_value,\n                '\\nEnd:\\t\\t', new Date(row_end).toLocaleString(), '\\tPrice: ', ((day_count) ? price[1] : row_start_value),\n                (day_count) ? '' : `\\nNext:\\t\\t ${new Date(price[0]).toLocaleString()} \\tPrice:  ${price[1]}`,\n                '\\nDay count:\\t', day_count\n            );*/\n\n            // Begin a new row\n            row_start = price[0];\n            row_start_value = price[1];\n        }\n\n        // Save latest values\n        row_end = price[0];\n        latest_value = price[1];\n    }\n\n    let contains = false;\n    for (const row of rows) {\n        if (row.start === row_start && row.end === row_end)\n            contains = true\n    }\n\n    // If the latest row wasn't added into the rows array\n    if (!contains) {\n        // Price change of the row\n        const value_change = (bear) ? row_start_value-latest_value : latest_value-row_start_value;\n        // If there was a price change\n        if (value_change > 0) {\n            // Number of days in the row\n            const day_count = (((row_end - row_start) / MILLIS_IN_DAY) | 0);\n            // Add the row into array\n            rows.push({ start: row_start, end: row_end, change: value_change, days: day_count });\n        }\n    }\n\n    return rows;\n}\n\nconst maxChange = (arr: number[][]) => {\n    // Return undefined if there's less than 2 values in the array\n    if (arr.length < 2)\n        return undefined;\n\n    // Max value change\n    let max_change = -1;\n    // Smallest value\n    let min_val = arr[0][1];\n    // Dates of min and max value\n    let min_date = arr[0][0], max_date = -1;\n    // Min value date for return value\n    let min_date_rtn = -1;\n    // Loop through the data\n    for (const n of arr) {\n        // Is current value biggest since the smallest value?\n        if ((n[1] > min_val) && (n[1] - min_val > max_change)) {\n            // Save max change\n            max_change = n[1] - min_val;\n            // Save max value date\n            max_date = n[0];\n            // Save min value date (the return variable)\n            min_date_rtn = min_date;\n        }\n        // Is the current value smaller than the smallest so far value?\n        if (n[1] < min_val) {\n            // Save min value\n            min_val = n[1];\n            // Save min value date\n            min_date = n[0];\n        }\n    }\n    console.log('max_change: ', max_change, '\\nmin_val: ', min_val, '\\nmin_date: ', min_date, '\\nmax_date: ', max_date, '\\nmin_date_rtn: ', min_date_rtn);\n\n    // Return the results (max_change is extra)\n    return { start: min_date_rtn, end: max_date, change: max_change};\n}\n\n\n\n// Assignments\n\n/**\n *\n * @param data Data from the CoinGecko MarketChart Range API\n * @returns Data for assignment a)\n */\nfunction getA(data: Types.MarketChart.Range): Types.Output.A {\n    // Get all (bear) market rows from the data\n    const allRows = getMarketRows(data.prices, true);\n    // Sort the array by the days value from smallest to highest\n    allRows.sort((a, b) => a.days - b.days);\n    /*for (const r of allRows) {\n        console.log(`Row: ${r.days},\\t${r.change} €`);\n    }*/\n    // Get the biggest value or -1 if the array was empty\n    const last = allRows.pop();\n    console.log('Last: ', last);\n    const max = last?.days ?? -1;\n\n    // Return assignment a) data\n    return { days: max };\n}\n\n/**\n *\n * @param data Data from the CoinGecko MarketChart Range API\n * @returns Data for assignment b)\n */\nfunction getB(data: Types.MarketChart.Range): Types.Output.B {\n    // Total volumes from the data\n    const total_volumes = filterDublicateDates(data.total_volumes);\n    // Sort the array by the trading volume from smallest to highest\n    total_volumes.sort((a, b) => a[1] - b[1]);\n    // Get the highest total volume day and return its values or [-1, -1] if the array was empty\n    const maxVal = total_volumes.pop() ?? [-1, -1];\n\n    // Return the date and price\n    return { date: maxVal[0], value: maxVal[1] }\n}\n\n/**\n *\n * @param data Data from the CoinGecko MarketChart Range API\n * @returns Data for assignment c)\n */\nfunction getC(data: Types.MarketChart.Range): Types.Output.C {\n    // Get only the first values of a day from the prices data\n    const filtered = filterDublicateDates(data.prices);\n    // Find the biggest price change from the filtered data (or undefined if there was less than 2 values)\n    const arr = maxChange(filtered);\n\n    // Was the data defined?\n    if (arr) {\n        console.log(arr);\n        // Was the buy and sell dates defined? (default values are -1)\n        if (arr.start > 0 && arr.end > 0) {\n            // Return the buy and sell date\n            return { buy_date: arr.start, sell_date: arr.end };\n        }\n    } else {\n        console.log('arr not defined');\n    }\n\n    // Should not trade\n    return { should_trade: false }\n}\n\n/**\n *\n * @param data JSON data from the CoinGecko MarketChart Range API\n * @returns Data of all assignments in typescript interface or undefined if an error happened\n */\nexport function getAllFromRangeJSON(data: string): Types.Output.All | undefined {\n    // Try to convert raw data from the API into the wanted form as a TypeScript interface\n    try {\n        // Parse the JSON string into typescript interface\n        const range: Types.MarketChart.Range = JSON.parse(data);\n\n        // Get assignment a) data from range\n        const a = getA(range);\n        // Get assignment b) data from range\n        const b = getB(range);\n        // Get assignment c) data from range\n        const c = getC(range);\n\n        // Return all assignments in typescript interface\n        return { a: a, b: b, c: c }\n\n    } catch (e) {\n        // An error occurred, print it into console\n        console.log('Error: ', e);\n    }\n\n}\n","import * as Types from './type';\nimport * as Convert from './Convert';\n\n// For nodejs (react includes fetch)\n//import axios from '../../../node_modules/axios/index';\n\nconst BASE_URL = 'https://api.coingecko.com/api/v3/coins';\n\n/**\n *\n * @param from start date for the range in timestamp (seconds since 1970)\n * @param to end date for the range in timestamp (seconds since 1970)\n * @param coin cryptocurrency id (default is bitcoin)\n * @param vs_currency the currency to show the values in (default is eur)\n * @returns all data parsed in TypeScript interface\n */\nexport async function getData(\n    from: string | number,\n    to: string | number,\n    coin = 'bitcoin',\n    vs_currency = 'eur'): Promise<Types.Output.All | undefined> {\n\n    // Full URL\n    const url = `${BASE_URL}/${coin}/market_chart/range?vs_currency=${vs_currency}&from=${from}&to=${to}`;\n    // Fetch data from the server\n    const res = await fetch(url);//axios.get(url);\n    // Was the request succesfull?\n    if (res.status === 200) {\n        // Success\n        console.log(\"(200): success\");\n        // Get the data from response\n        const data = await res.json();//.data;\n        // Print data into console\n        //console.log(\"Data: \", data);\n\n        // Try to convert data\n        try {\n            return Convert.getAllFromRangeJSON(JSON.stringify(data));\n        } catch (e) {\n            console.log(\"Error: \", e);\n        }\n    } else {\n        // Request wasn't succesfull\n        console.log(`Error: status code (${res.status})`);\n    }\n\n}\n","import React from \"react\";\n\n// Bootstrap components\nimport { Spinner, Row, Col } from \"react-bootstrap\";\n\nimport { Output as Types } from '../api/CoinGecko/Coins/type';\nimport { getData } from '../api/CoinGecko/Coins/MarketChart';\n\n/**\n * OutputView props\n */\ninterface Props {\n    startDate: number;\n    endDate: number;\n}\n\n/**\n *\n * @param props start and end date\n * @returns OutputView for the assignments data\n */\nexport default function OutputView(props: Props) {\n    // Start date\n    const [startDate, setStartDate] = React.useState<number>(-1);\n    // End date\n    const [endDate, setEndDate] = React.useState<number>(-1);\n\n    // Assignments data:\n    const [a, setA] = React.useState<Types.A>({ days: -1 });\n    const [b, setB] = React.useState<Types.B>({ date: -1, value: -1 });\n    const [c, setC] = React.useState<Types.C>({ buy_date: -1, sell_date: -1, should_trade: false });\n\n    // Is the data currently loading\n    const [loading, setLoading] = React.useState<boolean>(false);\n\n    // Fetch and set the data\n    const updateData = async (start: number, end: number) => {\n        setLoading(true);\n        const data = await getData(start, end);\n        if (data) {\n            setA(data.a);\n            setB(data.b);\n            setC(data.c);\n        }\n        setLoading(false);\n    }\n\n    // Get JSX elements for assignments c\n    const getC = () => {\n        console.log(c);\n        if (c.buy_date && c.sell_date) {\n            return (\n                <p>\n                    Buy date: <span style={styles.value}>{getDateStr(c.buy_date)}</span>\n                    <br />\n                    Sell date: <span style={styles.value}>{getDateStr(c.sell_date)}</span>\n                </p>\n            );\n        } else if (!c.should_trade) {\n            return <p style={styles.value}>YOU SHOULD NOT TRADE ON THE GIVEN DATE RANGE!</p>;\n        } else {\n            return <p>-</p>;\n        }\n    }\n\n    // Get date string from timestamp\n    const getDateStr = (date: number, time: boolean = false) => {\n        const dt = new Date(date);\n        if (date > 0)\n            return (time) ? dt.toLocaleString('fi-FI', { timeZone: 'UTC' }) : dt.toLocaleDateString('fi-FI');\n        else\n            return \"-\";\n    }\n\n    // Get JSX elements for all assignments\n    const getJSX = () => {\n        if (loading) {\n            return <h3>Loading... <Spinner animation=\"grow\" variant=\"light\" /></h3>;\n        } else {\n            return (\n                <div style={styles.outputs} className=\"d-inline-block\">\n                    <p>Between {getDateStr(startDate)} and {getDateStr(endDate)} Bitcoin's...</p>\n                    <Row sm={12}>\n                        <Col>\n                            <div style={styles.outputGroup}>\n                                <h4>A</h4>\n                                <p>price dropped <span style={styles.value}>{a.days}</span> days in row.</p>\n                            </div>\n                        </Col>\n                        {/*<hr />*/}\n                        <Col>\n                            <div style={styles.outputGroup}>\n                                <h4>B</h4>\n                                <p>highest trading volume was on <span style={styles.value}>{getDateStr(b.date)}</span> with <span style={styles.value}>{b.value}</span> euros.</p>\n                            </div>\n                        </Col>\n                        {/*<hr />*/}\n                        <Col>\n                            <div style={styles.outputGroup}>\n                                <h4>C</h4>\n                                <p>most profitable trading dates were</p>\n                                {getC()}\n                            </div>\n                        </Col>\n                    </Row>\n                </div>\n            );\n        }\n    }\n\n    // Execute when props changes (start and end dates)\n    React.useEffect(() => {\n        if (props.startDate > 0 && props.endDate > 0) {\n            if (props.startDate <= props.endDate) {\n                updateData(props.startDate, props.endDate);\n                setStartDate(props.startDate*1000);\n                setEndDate(props.endDate*1000);\n            }\n        }\n    }, [props]);\n\n    return (\n        <div style={styles.container}>\n            <h2>Output</h2>\n            <hr />\n            {getJSX()}\n        </div>\n    );\n}\n\n/**\n * CSS styles for OutputView\n */\nconst styles: { [key: string]: React.CSSProperties } = {\n    container: {\n        backgroundColor: \"#DDDDEECC\",\n        color: \"#333\",\n        borderRadius: \"12px\",\n        borderWidth: \"4px\",\n        borderColor: \"#222\",\n        padding: \"12px\",\n        width: \"fit-content\"\n    },\n    outputs: {\n        backgroundColor: \"#DDDDDDBB\",\n        textAlign: \"left\",\n        margin: \"2px\",\n        padding: \"4px\",\n        borderRadius: \"4px\"\n    },\n    outputGroup: {\n        backgroundColor: \"#abcabccc\",\n        borderRadius: \"4px\",\n        padding: \"4px\",\n        width: \"100%\",\n        height: \"100%\",\n        marginBottom: \"4px\"\n    },\n    value: {\n        fontWeight: \"bold\"\n    }\n};\n","import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// Bootstrap components\nimport { Container, Row, Col, Navbar } from 'react-bootstrap';\n\n// Input View for date range\nimport InputView from './components/Input';\n// Output View for the data\nimport OutputView from './components/Output';\n\n/**\n *\n * @returns Main view of the app\n */\nexport default function App() {\n  // Start date\n  const [startDate, setStartDate] = React.useState<number>(-1);\n  // End date\n  const [endDate, setEndDate] = React.useState<number>(-1);\n\n  // Is the input ok\n  const [inputOk, setInputOk] = React.useState<boolean>(false);\n\n  return (\n    <div style={styles.body}>\n      <main role=\"main\" className=\"container-fluid\" style={styles.main}>\n        <Container fluid className=\"text-center\">\n          <Row>\n            <Col sm={1} />\n            {/* Content */}\n            <Col sm={10} style={{ minWidth: \"fit-content\" }} >\n              {/* Navbar (just title, brand ans App Store link) */}\n              <Navbar className=\"navbar-inverse\" bg=\"dark\" variant=\"dark\" expand=\"lg\" style={styles.header}>\n                <Container fluid>\n                  <Navbar.Brand>\n                    <img src=\"/bitcoin_icon.png\" alt=\"bitcoin_icon\" className=\"d-inline-block align-top\" style={styles.brand_icon} />\n                    <h1 className=\"d-inline-block align-top\">Crypto Time Machine</h1>\n                  </Navbar.Brand>\n                  <a href=\"https://apps.apple.com/en/app/crypto-time-machine/id1602419673\" rel=\"noreferrer\" target=\"_blank\" className=\"pull-right\">\n                    <img alt=\"app_store\" src=\"Download_on_the_App_Store_Badge_US-UK_RGB_wht_092917.svg\" />\n                  </a>\n                </Container>\n              </Navbar>\n              {/* Main content */}\n              <Container fluid style={styles.container}>\n                <br />\n                <InputView setStartDate={setStartDate} setEndDate={setEndDate} setOutputOk={setInputOk} />\n                <hr />\n                {inputOk ? <OutputView startDate={startDate} endDate={endDate} /> : <></>}\n                <br />\n              </Container>\n              {/* Page footer */}\n              <footer id=\"sticky-footer\" className=\"site-footer clearfix py-2 bg-dark text-white-50 mr-auto\" style={styles.footer} >\n                <Container fluid className=\"text-center\">\n                  <Row className=\"content-heading clearfix media\">\n                    <span>\n                      {/*<a href=\"https://apps.apple.com/en/app/crypto-time-machine/id1602419673\" rel=\"noreferrer\" target=\"_blank\" className=\"pull-left\" style={{float: \"left\"}}>\n                        <img alt=\"app_store\" src=\"Download_on_the_App_Store_Badge_US-UK_RGB_wht_092917.svg\" style={styles.app_store_badge} />\n                      </a>*/}\n                      <small><a href=\"https://github.com/CaOs433/Vincit-Rising-Star-2021\" rel=\"noreferrer\" target=\"_blank\">Github</a> - Oskari Saarinen &copy; 2021</small>\n                    </span>\n                  </Row>\n                </Container>\n              </footer>\n            </Col>\n            <Col sm={1} />\n          </Row>\n        </Container>\n      </main>\n    </div>\n  );\n}\n\n/**\n * CSS styles for App\n */\nconst styles: { [key: string]: React.CSSProperties } = {\n  body: {\n    marginLeft: 0,\n    marginRight: 0,\n    width: \"100%\",\n    height: \"100%\",\n    paddingTop: 20,\n    //minWidth: 720\n  },\n  main: {\n    marginLeft: \"0px\",\n    marginBottom: \"40px\",\n    marginTop: \"0px\"\n  },\n  header: {\n    borderTopLeftRadius: \"40px\",\n    borderTopRightRadius: \"40px\",\n    borderBottomLeftRadius: \"0px\",\n    borderBottomRightRadius: \"0px\"\n  },\n  container: {\n    backgroundColor: \"#A12\",\n    textAlign: \"center\"\n  },\n  footer: {\n    borderTopLeftRadius: \"0px\",\n    borderTopRightRadius: \"0px\",\n    borderBottomLeftRadius: \"30px\",\n    borderBottomRightRadius: \"30px\",\n    marginTop: \"-16px\",\n    backgroundColor: \"rgba(200,200,200,0.2)\"\n  },\n  brand_icon: {\n    width: \"54px\",\n    height: \"54px\",\n    marginRight: \"8px\",\n    marginLeft: \"14px\"\n  },\n  app_store_badge: {\n    paddingRight: 10\n  }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}